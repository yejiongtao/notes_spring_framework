1. pre-requirements
	Gradle	--one of the best building tools available today that runs using Groovy as a primary language
		use your package manager to install Gradle
		build.gradle
			apply plugin: 'java'
			apply plugin: 'eclipse'
			apply plugin: 'application'

			mainClassName = 'hello.HelloWorld'
	
			repositories {		// define where to find the dependencies
			    mavenCentral()	// Gradle leans heavily on Maven
			}

			jar {			// the name of the jar to create
			    baseName = 'gs-gradle'
			    version =  '0.1.0'
			}

			// tag::dependencies[]
			sourceCompatibility = 1.8
			targetCompatibility = 1.8

			dependencies {
			    compile "joda-time:joda-time:2.2"
			}

			task wrapper(type: Wrapper) {
			    gradleVersion = '2.3'
			}

2. core modules of Spring
	dependency injection
		do not instantiate an object inside another Java class, rely on Spring's IOP module to create the object for you 
	aspect oriented programming
		do not mix non-business logic with actual business logic in your classes
	data access/integration
		Spring JDBC, lots of things handled by Spring
		Spring ORM(object relation mapping), provides full API support to integrate ORM tools like Hibernate, JPA, IBATIS, etc
		Spring OXM(converting between Java objects and XML), provides full API support to integrate OXM framework like JAXB, Castor, JiBX, etc
		Spring JMS(Java message service), provides full API support to produce and consume messages from JMS queues
		Spring Transaction Management
	MVC framework
	test framework

3. dependency injection
	problems if not using it
		direct dependency occurs when you initiate an object in another class
	Spring provides 2 ways of DI:
		using the contructor
		using the setter method

4. using Spring with Eclipse
	download jars on http://repo.spring.io/release/org/springframework/spring/
		add a user library
			right click the project -> properties -> Java build path -> libraries -> add library -> user library
			-> user libraries -> New -> ok -> add externals jars -> add all the jars in Spring Framework's libs
	download Commons Logging on https://commons.apache.org/proper/commons-logging/download_logging.cgi
		add it to the user library of the Spring FrameWork
not using Eclipse, you can use tools like Gradle to solve dependencies automatically
	
5. spring configuration file
	create
		new -> other -> xml -> xml file


